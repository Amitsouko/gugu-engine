
**** Needs ****

- Système d'UI raccordé à la Window, avec sa propre arborescence d'Elements
- Notion de Level2D et Level3D distincts, raccordés au World, avec leur propre arborescence d'Entités et d'Acteurs
- Système de Components sur les Acteurs/Entités


**** Unity ****

- Les GameObjects (Actors) ont des tableaux de components
- Chaque GameObject a un Component Transform par defaut, qui gere l'arborescence des enfants
 
 
 * GameObject
vector<Component>   components
Transform           transform   (default component)

 * Component
GameObject          associated object

 * Transform (Component)
Transform           parent
vector<Transform>   children


**** Unreal ****

- Un level définit une collection flat d'Actors.
- Une map définit un level (le Persistent), et peut référencer les levels inclus dans d'autres map (chaque sub-level existe forcement dans un asset de Map).
- Le World définit la map ouverte (et donc sa collection de levels) ainsi qu'un level Transient pour les actors spawnés et non sauvegardés.


**** Suggestion 1 ****

 * Problematiques
 
- Comment je cré un prefab avec des marqueurs et des cameras ?
> Un prefab serait un regroupement d'Actors

- Comment j'imbrique des prefabs dans des prefabs ?
> Un prefab peut contenir des Actors et des refs vers des Prefabs

- Comment je gère les cas où je veux une vue d'un level en exterieur, en meme temps qu'une vue d'un autre level en interieur ?
> Le rendu dépend du paramétrage des caméras, il suffit d'associer les cams aux sub-levels voulus au lieu du root level.

- Comment je gère des attachements de scenegraph d'actors entre eux ?


 * Concept
 
Liste de World sur l'Engine, avec un accesseur singleton sur le premier. Par defaut on n'a qu'un seul World à la fois.
Le World contient un Level Root, représentant le Level chargé, ainsi qu'un Level Temp pour gerer des Actors temporaires (Persistant et Transient d'Unreal)
Un Level possede une liste flat d'Actors, des sub-levels, et son scene graph.
Un Actor est une entité sur laquelle on peut brancher de la logique (components).
Un Actor peut être associé à un Element du graph scene du World via Component.
Un Actor peut recevoir Step et Update (true par defaut).
Un Actor est associé à un Level, qui gère son existence. Ce level peut etre le level Transient du World.
Une Scene est un asset représentant un Level, et contient un scenegraph ainsi qu'une liste de Prefabs d'Actors, et de references.
Une Scene peut contenir une liste de references vers d'autres Scenes.
Un Prefab est un asset représentant un groupe d'Actors, et contient la définition de ses composants (avec potentiellement un scene graph, commun pour tous les Actors inclus).
Un prefab peut hériter d'un Actor natif ou d'un autre Prefab.
Un Prefab peut référencer d'autres Prefabs attachés à son scenegraph ?


 * Actor

- represente une entité (statique ou dynamique) dans le world
- pas de notion d'arborescence, mais possibilité d'etre associé à un SceneGraph
Level*              m_pLevel
vector<Component*>  m_vecComponents
ComponentElement*   m_pComponentElement
ComponentMesh*      m_pComponentMesh

 * Component
 
Actor*              m_pOwner

 * Level
 
World*              m_pWorld
vector<Actor*>      m_vecActors
vector<Level*>      m_vecSubLevels
Element*            m_pRoot (scenegraph)

 * World
 
Level*              m_pRootLevel (Persistent)
Level*              m_pTransientLevel
Element*            m_pRoot (scenegraph)

 * Scene (ressource)
 
- représente un Level sérialisé
- contient une liste d'actors, et de refs de prefabs (ActorPrefabRef)
- contient une liste de refs de sub-Scenes

 * Prefab (ressource)
 
- Need notions de ActorPrefab (l'actor serialisé) et d'ActorPrefabRef (l'actor servant de redirector dans un level)
- représente un Actor sérialisé
- cet Actor peut inclure son propre SceneGraph


